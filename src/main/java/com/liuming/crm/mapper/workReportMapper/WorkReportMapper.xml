<?xml version="1.0" encoding="UTF-8" ?>
<!DOCTYPE mapper PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN" "http://mybatis.org/dtd/mybatis-3-mapper.dtd" >
<mapper namespace="com.liuming.crm.mapper.workReportMapper.WorkReportMapper" >
  <resultMap id="Map" type="com.liuming.crm.entity.workReportEntity.WorkReport" >
    <id column="work_report_id" property="workReportId" jdbcType="VARCHAR" />
    <result column="work_report_user_id" property="workReportUserId" jdbcType="VARCHAR" />
    <result column="work_report_user_name" property="workReportUserName" jdbcType="VARCHAR" />
    <result column="reviews_user_id" property="reviewsUserId" jdbcType="VARCHAR" />
    <result column="reviews_user_name" property="reviewsUserName" jdbcType="VARCHAR" />
    <result column="work_report_type" property="workReportType" jdbcType="INTEGER" />
    <result column="work_report_created_date" property="workReportCreatedDate" jdbcType="TIMESTAMP" />
    <result column="work_report_updated_date" property="workReportUpdatedDate" jdbcType="TIMESTAMP" />
  </resultMap>
  <resultMap id="ResultMapWithBLOBs" type="com.liuming.crm.entity.workReportEntity.WorkReportWithBLOBs" extends="Map" >
    <result column="work_report_content" property="workReportContent" jdbcType="LONGVARCHAR" />
    <result column="reviews" property="reviews" jdbcType="LONGVARCHAR" />
  </resultMap>
  <sql id="Example_Where_Clause" >
    <where >
      <foreach collection="oredCriteria" item="criteria" separator="or" >
        <if test="criteria.valid" >
          <trim prefix="(" suffix=")" prefixOverrides="and" >
            <foreach collection="criteria.criteria" item="criterion" >
              <choose >
                <when test="criterion.noValue" >
                  and ${criterion.condition}
                </when>
                <when test="criterion.singleValue" >
                  and ${criterion.condition} #{criterion.value}
                </when>
                <when test="criterion.betweenValue" >
                  and ${criterion.condition} #{criterion.value} and #{criterion.secondValue}
                </when>
                <when test="criterion.listValue" >
                  and ${criterion.condition}
                  <foreach collection="criterion.value" item="listItem" open="(" close=")" separator="," >
                    #{listItem}
                  </foreach>
                </when>
              </choose>
            </foreach>
          </trim>
        </if>
      </foreach>
    </where>
  </sql>
  <sql id="Update_By_Example_Where_Clause" >
    <where >
      <foreach collection="example.oredCriteria" item="criteria" separator="or" >
        <if test="criteria.valid" >
          <trim prefix="(" suffix=")" prefixOverrides="and" >
            <foreach collection="criteria.criteria" item="criterion" >
              <choose >
                <when test="criterion.noValue" >
                  and ${criterion.condition}
                </when>
                <when test="criterion.singleValue" >
                  and ${criterion.condition} #{criterion.value}
                </when>
                <when test="criterion.betweenValue" >
                  and ${criterion.condition} #{criterion.value} and #{criterion.secondValue}
                </when>
                <when test="criterion.listValue" >
                  and ${criterion.condition}
                  <foreach collection="criterion.value" item="listItem" open="(" close=")" separator="," >
                    #{listItem}
                  </foreach>
                </when>
              </choose>
            </foreach>
          </trim>
        </if>
      </foreach>
    </where>
  </sql>
  <sql id="Base_Column_List" >
    work_report_id, work_report_user_id, work_report_user_name, reviews_user_id, reviews_user_name, 
    work_report_type, work_report_created_date, work_report_updated_date
  </sql>
  <sql id="Blob_Column_List" >
    work_report_content, reviews
  </sql>
  <select id="selectByExampleWithBLOBs" resultMap="ResultMapWithBLOBs" parameterType="com.liuming.crm.entity.workReportEntity.WorkReportExample" >
    select
    <if test="distinct" >
      distinct
    </if>
    <include refid="Base_Column_List" />
    ,
    <include refid="Blob_Column_List" />
    from work_report
    <if test="_parameter != null" >
      <include refid="Example_Where_Clause" />
    </if>
    <if test="orderByClause != null" >
      order by ${orderByClause}
    </if>
  </select>
  <select id="selectByExample" resultMap="Map" parameterType="com.liuming.crm.entity.workReportEntity.WorkReportExample" >
    select
    <if test="distinct" >
      distinct
    </if>
    <include refid="Base_Column_List" />
    from work_report
    <if test="_parameter != null" >
      <include refid="Example_Where_Clause" />
    </if>
    <if test="orderByClause != null" >
      order by ${orderByClause}
    </if>
  </select>
  <select id="selectByPrimaryKey" resultMap="ResultMapWithBLOBs" parameterType="java.lang.String" >
    select 
    <include refid="Base_Column_List" />
    ,
    <include refid="Blob_Column_List" />
    from work_report
    where work_report_id = #{workReportId,jdbcType=VARCHAR}
  </select>
  <delete id="deleteByPrimaryKey" parameterType="java.lang.String" >
    delete from work_report
    where work_report_id = #{workReportId,jdbcType=VARCHAR}
  </delete>
  <delete id="deleteByExample" parameterType="com.liuming.crm.entity.workReportEntity.WorkReportExample" >
    delete from work_report
    <if test="_parameter != null" >
      <include refid="Example_Where_Clause" />
    </if>
  </delete>
  <insert id="insert" parameterType="com.liuming.crm.entity.workReportEntity.WorkReportWithBLOBs" >
    insert into work_report (work_report_id, work_report_user_id, work_report_user_name, 
      reviews_user_id, reviews_user_name, work_report_type, 
      work_report_created_date, work_report_updated_date, 
      work_report_content, reviews)
    values (#{workReportId,jdbcType=VARCHAR}, #{workReportUserId,jdbcType=VARCHAR}, #{workReportUserName,jdbcType=VARCHAR}, 
      #{reviewsUserId,jdbcType=VARCHAR}, #{reviewsUserName,jdbcType=VARCHAR}, #{workReportType,jdbcType=INTEGER}, 
      #{workReportCreatedDate,jdbcType=TIMESTAMP}, #{workReportUpdatedDate,jdbcType=TIMESTAMP}, 
      #{workReportContent,jdbcType=LONGVARCHAR}, #{reviews,jdbcType=LONGVARCHAR})
  </insert>
  <insert id="insertSelective" parameterType="com.liuming.crm.entity.workReportEntity.WorkReportWithBLOBs" >
    insert into work_report
    <trim prefix="(" suffix=")" suffixOverrides="," >
      <if test="workReportId != null" >
        work_report_id,
      </if>
      <if test="workReportUserId != null" >
        work_report_user_id,
      </if>
      <if test="workReportUserName != null" >
        work_report_user_name,
      </if>
      <if test="reviewsUserId != null" >
        reviews_user_id,
      </if>
      <if test="reviewsUserName != null" >
        reviews_user_name,
      </if>
      <if test="workReportType != null" >
        work_report_type,
      </if>
      <if test="workReportCreatedDate != null" >
        work_report_created_date,
      </if>
      <if test="workReportUpdatedDate != null" >
        work_report_updated_date,
      </if>
      <if test="workReportContent != null" >
        work_report_content,
      </if>
      <if test="reviews != null" >
        reviews,
      </if>
    </trim>
    <trim prefix="values (" suffix=")" suffixOverrides="," >
      <if test="workReportId != null" >
        #{workReportId,jdbcType=VARCHAR},
      </if>
      <if test="workReportUserId != null" >
        #{workReportUserId,jdbcType=VARCHAR},
      </if>
      <if test="workReportUserName != null" >
        #{workReportUserName,jdbcType=VARCHAR},
      </if>
      <if test="reviewsUserId != null" >
        #{reviewsUserId,jdbcType=VARCHAR},
      </if>
      <if test="reviewsUserName != null" >
        #{reviewsUserName,jdbcType=VARCHAR},
      </if>
      <if test="workReportType != null" >
        #{workReportType,jdbcType=INTEGER},
      </if>
      <if test="workReportCreatedDate != null" >
        #{workReportCreatedDate,jdbcType=TIMESTAMP},
      </if>
      <if test="workReportUpdatedDate != null" >
        #{workReportUpdatedDate,jdbcType=TIMESTAMP},
      </if>
      <if test="workReportContent != null" >
        #{workReportContent,jdbcType=LONGVARCHAR},
      </if>
      <if test="reviews != null" >
        #{reviews,jdbcType=LONGVARCHAR},
      </if>
    </trim>
  </insert>
  <select id="countByExample" parameterType="com.liuming.crm.entity.workReportEntity.WorkReportExample" resultType="java.lang.Integer" >
    select count(*) from work_report
    <if test="_parameter != null" >
      <include refid="Example_Where_Clause" />
    </if>
  </select>
  <update id="updateByExampleSelective" parameterType="map" >
    update work_report
    <set >
      <if test="record.workReportId != null" >
        work_report_id = #{record.workReportId,jdbcType=VARCHAR},
      </if>
      <if test="record.workReportUserId != null" >
        work_report_user_id = #{record.workReportUserId,jdbcType=VARCHAR},
      </if>
      <if test="record.workReportUserName != null" >
        work_report_user_name = #{record.workReportUserName,jdbcType=VARCHAR},
      </if>
      <if test="record.reviewsUserId != null" >
        reviews_user_id = #{record.reviewsUserId,jdbcType=VARCHAR},
      </if>
      <if test="record.reviewsUserName != null" >
        reviews_user_name = #{record.reviewsUserName,jdbcType=VARCHAR},
      </if>
      <if test="record.workReportType != null" >
        work_report_type = #{record.workReportType,jdbcType=INTEGER},
      </if>
      <if test="record.workReportCreatedDate != null" >
        work_report_created_date = #{record.workReportCreatedDate,jdbcType=TIMESTAMP},
      </if>
      <if test="record.workReportUpdatedDate != null" >
        work_report_updated_date = #{record.workReportUpdatedDate,jdbcType=TIMESTAMP},
      </if>
      <if test="record.workReportContent != null" >
        work_report_content = #{record.workReportContent,jdbcType=LONGVARCHAR},
      </if>
      <if test="record.reviews != null" >
        reviews = #{record.reviews,jdbcType=LONGVARCHAR},
      </if>
    </set>
    <if test="_parameter != null" >
      <include refid="Update_By_Example_Where_Clause" />
    </if>
  </update>
  <update id="updateByExampleWithBLOBs" parameterType="map" >
    update work_report
    set work_report_id = #{record.workReportId,jdbcType=VARCHAR},
      work_report_user_id = #{record.workReportUserId,jdbcType=VARCHAR},
      work_report_user_name = #{record.workReportUserName,jdbcType=VARCHAR},
      reviews_user_id = #{record.reviewsUserId,jdbcType=VARCHAR},
      reviews_user_name = #{record.reviewsUserName,jdbcType=VARCHAR},
      work_report_type = #{record.workReportType,jdbcType=INTEGER},
      work_report_created_date = #{record.workReportCreatedDate,jdbcType=TIMESTAMP},
      work_report_updated_date = #{record.workReportUpdatedDate,jdbcType=TIMESTAMP},
      work_report_content = #{record.workReportContent,jdbcType=LONGVARCHAR},
      reviews = #{record.reviews,jdbcType=LONGVARCHAR}
    <if test="_parameter != null" >
      <include refid="Update_By_Example_Where_Clause" />
    </if>
  </update>
  <update id="updateByExample" parameterType="map" >
    update work_report
    set work_report_id = #{record.workReportId,jdbcType=VARCHAR},
      work_report_user_id = #{record.workReportUserId,jdbcType=VARCHAR},
      work_report_user_name = #{record.workReportUserName,jdbcType=VARCHAR},
      reviews_user_id = #{record.reviewsUserId,jdbcType=VARCHAR},
      reviews_user_name = #{record.reviewsUserName,jdbcType=VARCHAR},
      work_report_type = #{record.workReportType,jdbcType=INTEGER},
      work_report_created_date = #{record.workReportCreatedDate,jdbcType=TIMESTAMP},
      work_report_updated_date = #{record.workReportUpdatedDate,jdbcType=TIMESTAMP}
    <if test="_parameter != null" >
      <include refid="Update_By_Example_Where_Clause" />
    </if>
  </update>
  <update id="updateByPrimaryKeySelective" parameterType="com.liuming.crm.entity.workReportEntity.WorkReportWithBLOBs" >
    update work_report
    <set >
      <if test="workReportUserId != null" >
        work_report_user_id = #{workReportUserId,jdbcType=VARCHAR},
      </if>
      <if test="workReportUserName != null" >
        work_report_user_name = #{workReportUserName,jdbcType=VARCHAR},
      </if>
      <if test="reviewsUserId != null" >
        reviews_user_id = #{reviewsUserId,jdbcType=VARCHAR},
      </if>
      <if test="reviewsUserName != null" >
        reviews_user_name = #{reviewsUserName,jdbcType=VARCHAR},
      </if>
      <if test="workReportType != null" >
        work_report_type = #{workReportType,jdbcType=INTEGER},
      </if>
      <if test="workReportCreatedDate != null" >
        work_report_created_date = #{workReportCreatedDate,jdbcType=TIMESTAMP},
      </if>
      <if test="workReportUpdatedDate != null" >
        work_report_updated_date = #{workReportUpdatedDate,jdbcType=TIMESTAMP},
      </if>
      <if test="workReportContent != null" >
        work_report_content = #{workReportContent,jdbcType=LONGVARCHAR},
      </if>
      <if test="reviews != null" >
        reviews = #{reviews,jdbcType=LONGVARCHAR},
      </if>
    </set>
    where work_report_id = #{workReportId,jdbcType=VARCHAR}
  </update>
  <update id="updateByPrimaryKeyWithBLOBs" parameterType="com.liuming.crm.entity.workReportEntity.WorkReportWithBLOBs" >
    update work_report
    set work_report_user_id = #{workReportUserId,jdbcType=VARCHAR},
      work_report_user_name = #{workReportUserName,jdbcType=VARCHAR},
      reviews_user_id = #{reviewsUserId,jdbcType=VARCHAR},
      reviews_user_name = #{reviewsUserName,jdbcType=VARCHAR},
      work_report_type = #{workReportType,jdbcType=INTEGER},
      work_report_created_date = #{workReportCreatedDate,jdbcType=TIMESTAMP},
      work_report_updated_date = #{workReportUpdatedDate,jdbcType=TIMESTAMP},
      work_report_content = #{workReportContent,jdbcType=LONGVARCHAR},
      reviews = #{reviews,jdbcType=LONGVARCHAR}
    where work_report_id = #{workReportId,jdbcType=VARCHAR}
  </update>
  <update id="updateByPrimaryKey" parameterType="com.liuming.crm.entity.workReportEntity.WorkReport" >
    update work_report
    set work_report_user_id = #{workReportUserId,jdbcType=VARCHAR},
      work_report_user_name = #{workReportUserName,jdbcType=VARCHAR},
      reviews_user_id = #{reviewsUserId,jdbcType=VARCHAR},
      reviews_user_name = #{reviewsUserName,jdbcType=VARCHAR},
      work_report_type = #{workReportType,jdbcType=INTEGER},
      work_report_created_date = #{workReportCreatedDate,jdbcType=TIMESTAMP},
      work_report_updated_date = #{workReportUpdatedDate,jdbcType=TIMESTAMP}
    where work_report_id = #{workReportId,jdbcType=VARCHAR}
  </update>

  <select id="findWorkReportByUserIdAndDate" parameterType="java.lang.String" resultMap="Map">
    SELECT
        *
    FROM
        work_report
    WHERE
        work_report_user_id = #{workReportUserId}
        AND work_report_updated_date LIKE #{workReportUpdatedDate}
  </select>

  <select id="findWorkReportByUserId" parameterType="java.lang.String" resultMap="ResultMapWithBLOBs">
    SELECT
        *
    FROM
        work_report
    WHERE
        work_report_user_id = #{workReportUserId}
    ORDER BY
        work_report_updated_date DESC
  </select>

  <select id="findWorkReport" resultMap="ResultMapWithBLOBs">
    SELECT
        *
    FROM
        work_report
    ORDER BY
        work_report_updated_date DESC
  </select>
</mapper>